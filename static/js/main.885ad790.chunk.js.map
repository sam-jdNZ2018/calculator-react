{"version":3,"sources":["../../../../javascript-calculator/src/cmps/calcbutton.js","../../../../javascript-calculator/src/cmps/display.js","../../../../javascript-calculator/src/cmps/calculator.js","../../../../javascript-calculator/src/serviceWorker.js","../../../../javascript-calculator/src/index.js"],"names":["CalcButton","props","react_default","a","createElement","id","className","onClick","handler","value","Display","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","type","eq","readOnly","curr","React","Component","INT_STATE","result","OP_REG","SIGN_REG","Calculator","_this","state","handleInput","bind","assertThisInitialized","clearEntry","handleOp","handleEquals","handleDec","handleNum","nextNumber","evalOp","evaluate","setState","test","length","slice","i","temp","newEq","now","final","text","startPos","end","num1","num2","op","total","pos","parseFloat","toString","butText","buttonList","push","calcbutton","display","Boolean","window","location","hostname","match","ReactDOM","render","calculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.885ad790.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CalcButton = props => {\r\n  return(\r\n    <button id={props.id} className=\"calc_but\" onClick={() => props.handler(props.value)}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default CalcButton;","import React from 'react';\n\nclass Display extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div id=\"display_cont\">\n        <input id=\"eq_display\" type=\"text\" value={this.props.eq} readOnly />\n        <input id=\"display\" type=\"text\" value={this.props.curr} readOnly />\n      </div>\n    );\n  }\n}\n\nexport default Display;","import React from 'react';\r\nimport CalcButton from './calcbutton';\r\nimport Display from './display';\r\n\r\nconst INT_STATE = {\r\n    eq: \"\", //The current equation\r\n    curr: \"0\", //What is currently displayed\r\n    result: \"\" //If the equals button has been pressed it will equal the result of the current equal, otherwise nothing\r\n};\r\nconst OP_REG = /[\\+\\-\\ร\\รท]{1}/;\r\nconst SIGN_REG = /[\\+\\-]{1}/;\r\n\r\nclass Calculator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = INT_STATE;\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.clearEntry = this.clearEntry.bind(this);\r\n        this.handleOp = this.handleOp.bind(this);\r\n        this.handleEquals = this.handleEquals.bind(this);\r\n        this.handleDec = this.handleDec.bind(this);\r\n        this.handleNum = this.handleNum.bind(this);\r\n        this.nextNumber = this.nextNumber.bind(this);\r\n        this.evalOp = this.evalOp.bind(this);\r\n        this.evaluate = this.evaluate.bind(this);\r\n    }\r\n\r\n    //Essesntially a reducer determining how button input is handled\r\n    handleInput(value) {\r\n        if (value == \"A/C\") {\r\n            this.setState(INT_STATE);\r\n        } else if (value == \"CE\") {\r\n            this.clearEntry();\r\n        } else if (OP_REG.test(value)) {\r\n            this.handleOp(value);\r\n        } else if (value == \"=\") {\r\n            this.handleEquals(value);\r\n        } else if (value == \".\") {\r\n            this.handleDec(value);\r\n        } else {\r\n            this.handleNum(value);\r\n        }\r\n    }\r\n\r\n    //Clear the previous entry displayed on the screen\r\n    clearEntry() {\r\n        if (this.state.eq.length > 0) {\r\n            //Reset to the initial state if clearing directly after resolving an equation\r\n            if (/[=]{1}/.test(this.state.eq)) {\r\n                this.setState(INT_STATE);\r\n            }\r\n            //Remove all of the first number in the equation if that number, used in the current equation, was the result of the previous equation\r\n            else if (this.state.result == this.state.curr && this.state.curr == this.state.eq) {\r\n                this.setState(INT_STATE);\r\n            }\r\n            //Reset the program to the initial state if the first item in the equation is deleted and this equation does not use the result of the previous equation\r\n            else if (this.state.result == \"\" && this.state.curr == this.state.eq && this.state.curr.length == 1) {\r\n                this.setState(INT_STATE);\r\n            }\r\n            //If the current entry for the equation is a number with more than one digit, remove the one farthest from the right\r\n            else if (this.state.curr.length > 1) {\r\n                this.setState({ eq: this.state.eq.slice(0, this.state.eq.length - 1), curr: this.state.curr.slice(0, this.state.curr.length - 1), result: this.state.result });\r\n            }\r\n            //If the current entry is an operator, the last one must be a number of unknown length\r\n            else if (OP_REG.test(this.state.curr)) {\r\n                let i = this.state.eq.length - 2;\r\n                let temp = \"\";\r\n                while (i >= 0 && OP_REG.test(this.state.eq[i]) == false) {\r\n                    temp = this.state.eq[i] + temp;\r\n                    i--;\r\n                }\r\n                this.setState({\r\n                    eq: this.state.eq.slice(0, this.state.eq.length - 1), curr: temp,\r\n                    result: this.state.result\r\n                });\r\n            }\r\n            //If the current entry is a number, the last one must be an operator\r\n            else {\r\n                this.setState({\r\n                    eq: this.state.eq.slice(0, this.state.eq.length - 1), curr: this.state.eq[this.state.eq.length - 2],\r\n                    result: this.state.result\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleOp(value) {\r\n        let newEq = this.state.eq;\r\n        let now = this.state.curr;\r\n        if (newEq.length == 0 && !SIGN_REG.test(value)) { //Cannot start an equation with multiplication or division\r\n            newEq = \"\";\r\n        } else if (OP_REG.test(newEq[newEq.length - 1])) { //If the previous button pressed was an operator, replace it with the current operator\r\n            newEq = newEq.slice(0, newEq.length - 1) + value;\r\n            now = value;\r\n        } else if (this.state.result == now) { //If you are using the result of the previous equation in a new equation\r\n            newEq = this.state.result + value;\r\n            now = value;\r\n        } else {\r\n            newEq = newEq + value;\r\n            now = value;\r\n        }\r\n        this.setState({\r\n            eq: newEq,\r\n            curr: now,\r\n            result: this.state.result\r\n        });\r\n    }\r\n\r\n    handleEquals(value) {\r\n        let newEq = this.state.eq + value;\r\n        let now = this.state.curr;\r\n        let final = this.state.result;\r\n        if (this.state.eq.length == 0) {//Cannot start an equation with an equals sign\r\n            newEq = \"\";\r\n        } else if (final != this.state.eq && !OP_REG.test(this.state.eq[this.state.eq.length - 1]) //Can only finish an equation if it is not already finished or the previous button pressed was an operator\r\n        ) {\r\n            final = this.evaluate(newEq);\r\n            newEq = newEq + final;\r\n            now = final;\r\n        }\r\n        this.setState({ eq: newEq, curr: now, result: final });\r\n    }\r\n\r\n    handleDec(value) {\r\n        let newEq = this.state.eq + value;\r\n        let now = this.state.curr;\r\n        if (this.state.eq.length == 0) { //If the first button clicked was a decimal, make sure it has a zero in front of it\r\n            newEq = \"0.\";\r\n            now = newEq;\r\n        } else if (/\\./.test(now) || this.state.result == now || OP_REG.test(this.state.eq[this.state.eq.length - 1])) //Cannot click decimal button if the current number already has a decimal, the equation has ended or the last button pressed was an operator\r\n        {\r\n            newEq = this.state.eq;\r\n        } else {\r\n            now = now + \".\";\r\n        }\r\n        this.setState({ eq: newEq, curr: now, result: this.state.result });\r\n    }\r\n\r\n    handleNum(value) {\r\n        let newEq = this.state.eq + value;\r\n        let now = this.state.curr;\r\n        let final = this.state.result;\r\n        if (value == \"0\" && (now == \"0\" || now == \"-0\" || now == \"+0\")) {// only allow the first digit in a number to be zero (for decimal numbers) \r\n            newEq = this.state.eq;\r\n        } else if (final == now) { // Just finished an equation but not using the result in the next equation\r\n            newEq = value;\r\n            now = value;\r\n            final = \"\";\r\n        }\r\n        else if (OP_REG.test(now) && now.length != this.state.eq.length) { //if the previous button clicked was an operator but was not the first button clicked\r\n            now = value;\r\n        }\r\n        else if ((now == \"+0\" || now == \"-0\") && value != \"0\") { // at start of equation do not allow leading zero\r\n            newEq = this.state.eq.slice(0, this.state.eq.length - 1) + value;\r\n            now = now[0] + value;\r\n\r\n        } else if (now == \"0\" && value != \"0\") { // during equation do not allow leading zeros\r\n            newEq = this.state.eq.slice(0, this.state.eq.length - 1) + value;\r\n            now = value;\r\n        }\r\n        else {\r\n            now = now + value;\r\n        }\r\n        this.setState({\r\n            eq: newEq,\r\n            curr: now,\r\n            result: final\r\n        });\r\n    }\r\n\r\n    //Return the string representation of the next floating point number in the equation starting from position\r\n    //startPos in the provided text\r\n    nextNumber(text, startPos) {\r\n        let end = text.length - 1;\r\n        for (let i = startPos; i < text.length; i++) {\r\n            if (OP_REG.test(text[i]) || text[i] == \"=\") {\r\n                end = i - 1;\r\n                break;\r\n            }\r\n        }\r\n        return end + 1;\r\n    }\r\n\r\n    //apply an operator to two numbers\r\n    evalOp(num1, num2, op) {\r\n        if (op == \"+\") {\r\n            return num1 + num2;\r\n        } else if (op == \"-\") {\r\n            return num1 - num2;\r\n        } else if (op == \"ร\") {\r\n            return num1 * num2;\r\n        } else if (op == \"รท\") {\r\n            return num1 / num2;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    //Turns the equation the user inputed through the buttons into a resulting number\r\n    evaluate(value) {\r\n        let total = 0;\r\n        let pos = 0;\r\n        if (SIGN_REG.test(value[0])) {\r\n            pos = this.nextNumber(value, 1);\r\n            total = parseFloat(value[0] + value.slice(1, pos));\r\n        } else {\r\n            pos = this.nextNumber(value, 0);\r\n            total = parseFloat(value.slice(0, pos));\r\n        }\r\n        while (value[pos] != \"=\") {\r\n            let end = this.nextNumber(value, pos + 1);\r\n            total = this.evalOp(\r\n                total,\r\n                parseFloat(value.slice(pos + 1, end)),\r\n                value[pos]\r\n            );\r\n            pos = end;\r\n        }\r\n        //return parseFloat(total.toFixed(4)).toString();\r\n        return total.toString();\r\n    }\r\n\r\n    render() {\r\n        const butText = [\r\n            [\"clear\", \"A/C\"],\r\n            [\"clear_entry\", \"CE\"],\r\n            [\"divide\", \"รท\"],\r\n            [\"seven\", \"7\"],\r\n            [\"eight\", \"8\"],\r\n            [\"nine\", \"9\"],\r\n            [\"multiply\", \"ร\"],\r\n            [\"four\", \"4\"],\r\n            [\"five\", \"5\"],\r\n            [\"six\", \"6\"],\r\n            [\"subtract\", \"-\"],\r\n            [\"one\", \"1\"],\r\n            [\"two\", \"2\"],\r\n            [\"three\", \"3\"],\r\n            [\"add\", \"+\"],\r\n            [\"zero\", \"0\"],\r\n            [\"decimal\", \".\"],\r\n            [\"equals\", \"=\"],\r\n        ];\r\n        let buttonList = [];\r\n        for (let i = 0; i < 18; i++) {\r\n            buttonList.push(\r\n                <CalcButton\r\n                    id={butText[i][0]}\r\n                    value={butText[i][1]}\r\n                    handler={this.handleInput}\r\n                />\r\n            );\r\n        }\r\n        return (\r\n            <div id=\"calc_container\">\r\n                <Display eq={this.state.eq} curr={this.state.curr} />\r\n                <div id=\"button_cont\">\r\n                    {buttonList}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Calculator;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport Calculator from './cmps/calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Calculator />, document.getElementById('main'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}